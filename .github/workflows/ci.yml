name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check Prettier formatting
        run: npm run format:check
        
      - name: Check TypeScript types
        run: npm run type-check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      # TODO: Uncomment when tests are implemented
      # - name: Run unit tests
      #   run: npm test
      #   
      # - name: Upload test coverage
      #   uses: codecov/codecov-action@v3
      #   if: always()

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
          REDIS_URL: "redis://localhost:6379"
          NEXTAUTH_SECRET: "test-secret-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"
          NEXT_PUBLIC_APP_NAME: "Blues Dance Festival Finder"
          NEXT_PUBLIC_APP_URL: "http://localhost:3000"
          NEXT_PUBLIC_ENVIRONMENT: "test"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: false
          tags: festival-scout:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notification:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-format, build, security-check, docker-build]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.lint-and-format.result == 'success' && needs.build.result == 'success' && needs.security-check.result == 'success' && needs.docker-build.result == 'success' }}
        run: echo "✅ All CI checks passed successfully!"
        
      - name: Notify failure
        if: ${{ needs.lint-and-format.result == 'failure' || needs.build.result == 'failure' || needs.security-check.result == 'failure' || needs.docker-build.result == 'failure' }}
        run: |
          echo "❌ CI pipeline failed. Check the logs above for details."
          exit 1